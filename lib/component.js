import { Events } from './events';
import { Render } from '../index';
import { Utils } from './utils';

class Component {
  constructor() {
    // init state
    this.state = {};

    if(!this.guid) {
      // guids on ast are generated by transform
      // build incase component is classed, and not used as JSX
      // we'll put a guid on it
      this.guid = Utils.guid();
    }

    let pushProps = (instance, props) => {

      // todo condense this function
      // push props to children that have bound them
      instance.children.forEach(child => {
        if (!child.instance) {
          // get the instance
          let cached = Render.getInstance(child.guid);
          console.log(cached.instance.props);
          if (cached.instance.props) {
            // notify and set props
            if (cached.instance.componentWillRecieveProps) {
              cached.instance.componentWillRecieveProps.call(
                cached.instance,
                props
              );
            }
            cached.instance.props = props;
          }

          if (cached.children) {
            pushProps(cached, props);
          }
        } else {
          // update the child instances
          console.log(child.instance, child.instance.props);
          if (child.instance && child.instance.props) {

            // notify child of incoming props
            if (child.instance.componentWillRecieveProps) {
              console.log('calling will recieve props', child, props)
              // set the props
              child.instance.props = props;
              child.instance.componentWillRecieveProps.call(
                child.instance,
                props
              );

            }

          }

          if(child.children) {
            pushProps(child, props);
          }
        }
      });
    };

    // set props
    this.setProps = (props, cb) => {

      props = merge(this.props, props);

      console.log(this)

      // set props of this component
      if (this.componentWillRecieveProps) {
        this.componentWillRecieveProps.call(this, props);
      }
      this.props = props;

      pushProps(this, props);

      // fire callback for setProps if one was passed
      if (cb) {
        cb();
      }
    };

    // set state
    this.setState = (state, cb) => {
      this.state = merge(this.state, state);
      // send updated AST to raster
      this.render ? Render(this) : '';

      if (cb) {
        cb();
      }
    };
  }
}

// utility function to deep clone/merge
function merge(a, b) {
  const c = Object.assign({}, a, b);
  return c;
}

// export component
export { Component };
